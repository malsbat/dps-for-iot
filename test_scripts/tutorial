#!/bin/bash

# Include common functions
dir="${BASH_SOURCE%/*}"
if [[ ! -d "$dir" ]]; then dir="$PWD"; fi
. "$dir/common.sh"

USE_DTLS=${USE_DTLS:-0}

#
# When DTLS being used, security must be enabled for the ack to be
# succesfully delivered.
#
if [ $USE_DTLS -eq 0 ]; then
    #
    # Hello world
    #
    reset_logs

    tutorial subscribe ack
    sleep 1
    tutorial publish ack
    sleep 1

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi

    #
    # Building a DPS network
    #
    reset_logs

    tutorial -l 40001
    sleep 1
    tutorial -p 40001 subscribe ack
    sleep 1
    tutorial -p 40001 publish ack
    sleep 1

    n=$(grep -s "payload=Hello\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial3.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi
fi # $USE_DTLS -eq 0

if [ $USE_DTLS -ne 0 ]; then
    #
    # DTLS with pre-shared keys
    #
    reset_logs

    tutorial -l 41001 -x network-psk subscribe ack
    sleep 1
    tutorial -p 41001 -x network-psk publish ack
    sleep 1

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi

    #
    # DTLS with certificates
    #
    reset_logs

    tutorial -l 42001 -x network-cert subscribe ack
    sleep 1
    tutorial -p 42001 -x network-cert publish ack
    sleep 1

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi
fi # $USE_DTLS -ne 0

if [ $USE_DTLS -eq 0 ]; then
    #
    # Protecting the payload - symmetric key
    #
    reset_logs

    tutorial -l 43001 -x symmetric subscribe ack
    sleep 1
    tutorial -p 43001 -x symmetric publish ack
    sleep 1

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi

    #
    # Protecting the payload - asymmetric key
    #
    reset_logs

    tutorial -l 44001 -x asymmetric subscribe
    sleep 1
    tutorial -p 44001 -x asymmetric publish
    sleep 2

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi

    #
    # Authenticating the sender - symmetric key
    #
    reset_logs

    tutorial -l 45001 -x symmetric auth subscribe ack
    sleep 1
    tutorial -p 45001 -x symmetric auth publish ack
    sleep 2

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi

    #
    # Authenticating the sender - asymmetric key
    #
    reset_logs

    tutorial -l 46001 -x asymmetric auth subscribe ack
    sleep 1
    tutorial -p 46001 -x asymmetric auth publish ack
    sleep 2

    n=$(grep -s "payload=Hello\$" out/tutorial1.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Subscriber did not receive publication"
	exit 1
    fi
    n=$(grep -s "payload=World\$" out/tutorial2.log | wc -l)
    if [ $n -ne 1 ]; then
	echo "Publisher did not receive acknowledgement"
	exit 1
    fi
fi # $USE_DTLS -eq 0
