Import(['extEnv'])

platform = extEnv['PLATFORM']

# Pull down mbedtls from github and build the library

mbedtlsEnv = extEnv.Clone()
mbedtlsGit = mbedtlsEnv.Command('./mbedtls/.git', None, 'git clone https://github.com/ARMmbed/mbedtls ext/mbedtls')

mbedtlsEnv.Append(
    CPPPATH = [
        '.',
        './mbedtls/include/',
    ],
    CPPDEFINES = [
        'MBEDTLS_USER_CONFIG_FILE=\\"mbedtls_config.h\\"',
    ]
)

if mbedtlsEnv['PLATFORM'] == 'posix':
   mbedtlsEnv.Append(CFLAGS = ['-fPIC', "-g"])

mbedtlsSrcs = [
     './mbedtls/library/aes.c',
     './mbedtls/library/aesni.c',
     './mbedtls/library/asn1write.c',
     './mbedtls/library/asn1parse.c',
     './mbedtls/library/base64.c',
     './mbedtls/library/bignum.c',
     './mbedtls/library/cipher.c',
     './mbedtls/library/cipher_wrap.c',
     './mbedtls/library/ctr_drbg.c',
     './mbedtls/library/debug.c',
     './mbedtls/library/ecdh.c',
     './mbedtls/library/ecdsa.c',
     './mbedtls/library/ecp.c',
     './mbedtls/library/ecp_curves.c',
     './mbedtls/library/entropy.c',
     './mbedtls/library/entropy_poll.c',
     './mbedtls/library/error.c',
     './mbedtls/library/gcm.c',
     './mbedtls/library/hmac_drbg.c',
     './mbedtls/library/md.c',
     './mbedtls/library/md_wrap.c',
     './mbedtls/library/md5.c',
     './mbedtls/library/oid.c',
     './mbedtls/library/pem.c',
     './mbedtls/library/pk.c',
     './mbedtls/library/pk_wrap.c',
     './mbedtls/library/pkparse.c',
     './mbedtls/library/sha256.c',
     './mbedtls/library/sha512.c',
     './mbedtls/library/timing.c',
     './mbedtls/library/x509.c',
     './mbedtls/library/x509_crt.c',
]
mbedtlsSrcs += [
     './mbedtls/library/ssl_cache.c',
     './mbedtls/library/ssl_ciphersuites.c',
     './mbedtls/library/ssl_cli.c',
     './mbedtls/library/ssl_cookie.c',
     './mbedtls/library/ssl_srv.c',
     './mbedtls/library/ssl_tls.c',
]

mbedtlsObj = mbedtlsEnv.Object(mbedtlsSrcs)
mbedtlsLib = mbedtlsEnv.Library('lib/libmbedtls', mbedtlsObj)

Depends(mbedtlsSrcs, mbedtlsGit)
Depends(mbedtlsObj, './mbedtls_config.h')

# Pull down safestringlib from github and build the library

scEnv = extEnv.Clone()
scgit = scEnv.Command('./safestring/.git', None, 'git clone https://github.com/01org/safestringlib.git ext/safestring')

if scEnv['PLATFORM'] == 'win32':
    scEnv.Append(CPPDEFINES = ['_CRT_SECURE_NO_WARNINGS'])
    scEnv.Append(CPPDEFINES = ['__STDC_WANT_SECURE_LIB__=0'])
    scEnv.Append(CFLAGS = ['/J', '/W3', '/nologo'])
    scEnv.Append(CFLAGS = ['/Gy', '/O2', '/GF', '/MT'])

    # Suppress specific warnings
    scEnv.Append(CFLAGS = ['/wd4267', '/wd4244'])
elif scEnv['PLATFORM'] == 'posix':
    scEnv.Append(CPPDEFINES = ['_ISCO99_SOURCE'])
    scEnv.Append(CFLAGS = ['-Os', '-fPIC', '-std=c99', '-Wall', '-Wextra', '-Wno-unused-parameter', '-Wno-implicit-fallthrough', '-MMD'])
else:
    print('Unsupported system')
    exit()

scsrcs = ['./safestring/safeclib/ignore_handler_s.c',
          './safestring/safeclib/safe_mem_constraint.c',
          './safestring/safeclib/safe_str_constraint.c',
          './safestring/safeclib/memcpy_s.c',
          './safestring/safeclib/memmove_s.c',
          './safestring/safeclib/memset_s.c',
          './safestring/safeclib/memzero_s.c',
          './safestring/safeclib/strcmp_s.c',
          './safestring/safeclib/strncpy_s.c',
          './safestring/safeclib/strnlen_s.c',
          './safestring/safeclib/mem_primitives_lib.c']

scEnv['CPPPATH'] = './safestring/include'

sclib = scEnv.Library('lib/safestring', scsrcs)

Depends(scsrcs, scgit)

# Return libraries

Return (['mbedtlsLib', 'sclib'])
