import os
Import(['extEnv'])

platform = extEnv['PLATFORM']

# Pull down safestringlib from github and build the library

env = extEnv.Clone()

scgit = env.Command('./safestring/.git', None,
                      ['git clone -n https://github.com/intel/safestringlib.git ext/safestring'])
screl = env.Command('./safestring/makefile', scgit,
                      ['git checkout 77b772849eda2321fb0dca56a321e3939930d7b9'],
                      chdir = 'ext/safestring')

if env['PLATFORM'] == 'win32':
    env.Append(CPPDEFINES = ['_CRT_SECURE_NO_WARNINGS'])
    env.Append(CPPDEFINES = ['__STDC_WANT_SECURE_LIB__=0'])
    env.Append(CFLAGS = ['/J', '/W3', '/nologo'])
    env.Append(CFLAGS = ['/Gy', '/O2', '/GF', '/MT'])
    # Suppress specific warnings
    env.Append(CFLAGS = ['/wd4267', '/wd4244'])
elif env['PLATFORM'] == 'posix':
    env.Append(CPPDEFINES = ['_ISCO99_SOURCE'])
    env.Append(CFLAGS = ['-Os', '-fPIC', '-std=c99', '-Wall', '-Wextra', '-Wno-unused-parameter', '-Wno-implicit-fallthrough', '-MMD'])
else:
    print('Unsupported system')
    exit()

sources = [
    './safestring/safeclib/ignore_handler_s.c',
    './safestring/safeclib/safe_mem_constraint.c',
    './safestring/safeclib/safe_str_constraint.c',
    './safestring/safeclib/memcpy_s.c',
    './safestring/safeclib/memmove_s.c',
    './safestring/safeclib/memset_s.c',
    './safestring/safeclib/memzero_s.c',
    './safestring/safeclib/strcmp_s.c',
    './safestring/safeclib/strncpy_s.c',
    './safestring/safeclib/strnlen_s.c',
    './safestring/safeclib/mem_primitives_lib.c'
]

env['CPPPATH'] = './safestring/include'

Depends(sources, screl)

libs = [env.Library('lib/safestring', sources)]
Return('libs')
