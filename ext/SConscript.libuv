import os
Import(['env'])

# Pull down libuv from github and build the library

uvenv = env.Clone()

if uvenv['CC'] == 'cl':
    uvenv.Append(CPPDEFINES = ['_CRT_NONSTDC_NO_DEPRECATE', '_GNU_SOURCE'])

git = uvenv.Command('./libuv/.git', None,
                    ['git clone -q -n https://github.com/libuv/libuv.git ext/libuv'])

dep = uvenv.Command('./libuv/README', git,
                    ['git fetch -q', 'git checkout -q tags/v1.23.2'],
                    chdir = 'ext/libuv')

# Common source files
includes = [
    './libuv/include/uv.h'
]
uvincludes = [
    './libuv/include/uv/errno.h',
    './libuv/include/uv/threadpool.h',
    './libuv/include/uv/version.h'
]
sources = [
    './libuv/src/fs-poll.c',
    './libuv/src/inet.c',
    './libuv/src/threadpool.c',
    './libuv/src/timer.c',
    './libuv/src/uv-common.c',
    './libuv/src/uv-data-getter-setters.c',
    './libuv/src/version.c'
]

uvenv['CPPPATH'] = ['./libuv/include', './libuv/src']

if uvenv['PLATFORM'] == 'win32':
    uvincludes += [
        './libuv/include/uv/tree.h',
        './libuv/include/uv/win.h'
    ]
    sources += [
        './libuv/src/win/async.c',
        './libuv/src/win/core.c',
        './libuv/src/win/detect-wakeup.c',
        './libuv/src/win/dl.c',
        './libuv/src/win/error.c',
        './libuv/src/win/fs-event.c',
        './libuv/src/win/fs.c',
        './libuv/src/win/getaddrinfo.c',
        './libuv/src/win/getnameinfo.c',
        './libuv/src/win/handle.c',
        './libuv/src/win/loop-watcher.c',
        './libuv/src/win/pipe.c',
        './libuv/src/win/poll.c',
        './libuv/src/win/process-stdio.c',
        './libuv/src/win/process.c',
        './libuv/src/win/signal.c',
        './libuv/src/win/stream.c',
        './libuv/src/win/tcp.c',
        './libuv/src/win/thread.c',
        './libuv/src/win/tty.c',
        './libuv/src/win/udp.c',
        './libuv/src/win/util.c',
        './libuv/src/win/winapi.c',
        './libuv/src/win/winsock.c'
    ]
else:
    uvincludes += [
        './libuv/include/uv/linux.h',
        './libuv/include/uv/unix.h'
    ]
    sources += [
        './libuv/src/unix/async.c',
        './libuv/src/unix/core.c',
        './libuv/src/unix/dl.c',
        './libuv/src/unix/fs.c',
        './libuv/src/unix/getaddrinfo.c',
        './libuv/src/unix/getnameinfo.c',
        './libuv/src/unix/linux-core.c',
        './libuv/src/unix/linux-inotify.c',
        './libuv/src/unix/linux-syscalls.c',
        './libuv/src/unix/loop-watcher.c',
        './libuv/src/unix/loop.c',
        './libuv/src/unix/pipe.c',
        './libuv/src/unix/poll.c',
        './libuv/src/unix/process.c',
        './libuv/src/unix/procfs-exepath.c',
        './libuv/src/unix/proctitle.c',
        './libuv/src/unix/signal.c',
        './libuv/src/unix/stream.c',
        './libuv/src/unix/sysinfo-loadavg.c',
        './libuv/src/unix/sysinfo-memory.c',
        './libuv/src/unix/tcp.c',
        './libuv/src/unix/thread.c',
        './libuv/src/unix/tty.c',
        './libuv/src/unix/udp.c'
    ]

objs = uvenv.Object(sources)
shobjs = uvenv.SharedObject(sources)

Depends(sources, dep)

uvenv.Install('#/build/dist/inc', includes)
uvenv.Install('#/build/dist/inc/uv', uvincludes)
Return('objs shobjs')
