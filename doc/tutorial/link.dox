/**
@page tutorials-link Building a DPS network
@tableofcontents

@details
The @ref tutorials-hello-world tutorial showed how to build a simple
multicast publisher and subscriber network.  This tutorial will
show how to use the link functionality of DPS to create more
complex networks that can span subnets.

As before, we need to create nodes for the publisher and subscriber
using @link creating-a-node DPS_CreateNode() @endlink.  But this
time we will create a third type of node that is neither a
publisher or subscriber that will forward publications and
subscriptions between the publisher and subscriber nodes.

@section starting-a-unicast-node Starting a node
@snippet tutorial.c Starting a unicast node

The first thing we will do is disable multicast sending and
receiving for our three nodes by using @ref DPS_MCAST_PUB_DISABLED for
the @c mcastPub parameter of DPS_StartNode().  All publications and
subscriptions will go through the forwarding node.

The second thing we do is specify the @c listenPort parameter to
DPS_StartNode().  A value of zero lets DPS assign an ephemeral
listening port.  A value of non-zero requests a specific port.

The last thing we do is get the ephemeral port DPS has chosen with
DPS_GetPortNumber().  This will be used by the subscriber and
publisher to link to the forwarding node.

@section linking Linking to a node
@snippet tutorial.c Linking to a node

Now that we know the host (@c localhost in this example) and
listening port of the forwarding node, we can call DPS_Link() to
create the link from the subscriber and publisher to the forwarding
node.  In order to do this we must first create a @ref
DPS_NodeAddress and set its value to the host and port of the
forwarding node.

Once we call DPS_Link() we can destroy the @ref DPS_NodeAddress as
we don't need it anymore while we wait for the asynchronous link to
complete.

@snippet tutorial.c Linking complete

The link is now complete and we can proceed with @link
receiving-a-publication subscribing @endlink or @link
sending-a-publication publishing @endlink as before.

@note The link complete callback is dispatched from the @c
DPS_Node's thread.

@see DPS_Unlink(), DPS_LinkTo(), DPS_UnlinkFrom()
 */
